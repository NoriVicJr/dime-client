/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.dime.view;

import eu.dime.control.DummyLoadingViewHandler;
import eu.dime.control.NotificationManager;
import eu.dime.model.CreateItemFailedException;
import eu.dime.model.GenItem;
import eu.dime.model.ItemFactory;
import eu.dime.model.Model;
import eu.dime.model.ModelHelper;
import eu.dime.model.ModelRequestContext;
import eu.dime.model.TYPES;
import eu.dime.model.displayable.DisplayableItem;
import eu.dime.model.displayable.PersonItem;
import eu.dime.model.displayable.ProfileItem;
import eu.dime.model.dummydata.DummyContentGenerator;
import eu.dime.model.storage.InitStorageFailedException;
import eu.dime.restapi.DimeHelper;
import eu.dime.restapi.RestApiAccess;
import eu.dime.restapi.RestApiTest;
import eu.dime.restapi.ShareItemTest;
import eu.dime.view.csvimport.CSVParser;
import eu.dime.view.helper.UIHelper;
import eu.dime.view.viewmodel.JLoadingViewHandler;
import eu.dime.view.viewmodel.ListItemModel;
import eu.dime.view.viewmodel.ModelConfigurationHelper;
import eu.dime.view.viewmodel.OwnerComboListItem;
import eu.dime.view.viewmodel.OwnerComboModel;
import eu.dime.view.viewmodel.Settings;
import eu.dime.view.viewmodel.TypeList;
import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.util.List;
import java.util.UUID;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import sit.io.FileHelper;
import sit.log.JLogView;
import sit.web.client.HttpHelper;

/**
 *
 * @author simon
 */
public class ModelViewer extends javax.swing.JFrame {

    private Settings settings = null;
    private TypeList typeList = new TypeList();
    private ItemDetail itemDetail = new ItemDetail(this);
    private JLoadingViewHandler lvh = new JLoadingViewHandler(new WaitMessage(this, true));
    private NotificationViewer nv = new NotificationViewer(this);
    //Create a file chooser
    private final JFileChooser fileChooser = new JFileChooser("./dime");
    private SanityCheckView scv;
    private JLogView logView = null;

    /**
     * Creates new form ModelViewer
     */
    public ModelViewer() {
        initComponents();
        initData();
        this.setTitle("di.me Model Viewer");

        UIHelper.centerWindow(this);

        NotificationManager.registerSecondLevel(nv);
        fileChooser.setFileFilter(new FileFilter() {

            private FileHelper fh = new FileHelper();

            @Override
            public boolean accept(File f) {
                String fileExtention = fh.getExtention(f.getName());
                return fileExtention.equalsIgnoreCase("csv");
            }

            @Override
            public String getDescription() {
                return "*.csv files";
            }
        });
        scv = new SanityCheckView(this, true);

        logView = new JLogView();
        logView.registerToGlobal();


    }

    private void updateConfiguration(Settings settings) {

        this.settings = settings;
        try {
            Model.getInstance().updateSettings(this.settings.getCurrentConfiguration().produceModelConfiguration());
        } catch (InitStorageFailedException ex) {
            showError(ex);
            System.exit(-1);
        }
        hosterText.setText(this.settings.getCurrentConfiguration().getMainSAID());

    }

    private void initData() {
        updateConfiguration(ModelConfigurationHelper.getStoredSettings());
        typeSelectCombo.setModel(typeList);
        ownerComboBox.setModel(new OwnerComboModel(new Vector<PersonItem>()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        typeSelectCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        guidText = new javax.swing.JTextField();
        getAllButton = new javax.swing.JButton();
        getButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        hosterText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        clearCacheButton = new javax.swing.JButton();
        addNewButton = new javax.swing.JButton();
        ownerComboBox = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        listScrollPane = new javax.swing.JScrollPane();
        itemList = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        importMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        showReceivedNotificationsMenuItem = new javax.swing.JMenuItem();
        showLogMenuItem = new javax.swing.JMenuItem();
        extraMenu = new javax.swing.JMenu();
        settingsMenuItem = new javax.swing.JMenuItem();
        generateDummyContentMenuItem = new javax.swing.JMenuItem();
        removeAllNotificationsMenuItem = new javax.swing.JMenuItem();
        sanityCheckMenuItem = new javax.swing.JMenuItem();
        getAllHostersMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        rESTTestSimpleMenuItem = new javax.swing.JMenuItem();
        rESTTestFullMenuItem = new javax.swing.JMenuItem();
        shareTestFullMenuItem = new javax.swing.JMenuItem();
        checkAuthMenuItem = new javax.swing.JMenuItem();
        searchGlobalMenuItem = new javax.swing.JMenuItem();
        getModelCount = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Type");

        typeSelectCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("GUID");

        getAllButton.setText("Get All");
        getAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAllButtonActionPerformed(evt);
            }
        });

        getButton.setText("Get");
        getButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Hoster");

        jLabel4.setText("Owner");

        clearCacheButton.setText("Clear Cache");
        clearCacheButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCacheButtonActionPerformed(evt);
            }
        });

        addNewButton.setText("Add new ...");
        addNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewButtonActionPerformed(evt);
            }
        });

        ownerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "@me" }));
        ownerComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                ownerComboBoxPopupMenuWillBecomeVisible(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(guidText, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(typeSelectCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(addNewButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(getAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearCacheButton)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(hosterText, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addComponent(ownerComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeSelectCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getAllButton)
                    .addComponent(clearCacheButton)
                    .addComponent(hosterText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addNewButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guidText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getButton)
                    .addComponent(ownerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        itemList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemListMouseClicked(evt);
            }
        });
        listScrollPane.setViewportView(itemList);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(listScrollPane)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(listScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
        );

        jButton3.setText("Configuration");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton3))
        );

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        importMenuItem.setText("Import from CSV");
        importMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(importMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setMnemonic('s');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        viewMenu.setMnemonic('v');
        viewMenu.setText("View");

        showReceivedNotificationsMenuItem.setText("Show Notifications");
        showReceivedNotificationsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showReceivedNotificationsMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(showReceivedNotificationsMenuItem);

        showLogMenuItem.setText("show Log");
        showLogMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showLogMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(showLogMenuItem);

        jMenuBar1.add(viewMenu);

        extraMenu.setMnemonic('x');
        extraMenu.setText("Extra");
        extraMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                extraMenuMouseClicked(evt);
            }
        });
        extraMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extraMenuActionPerformed(evt);
            }
        });

        settingsMenuItem.setText("Configuration");
        settingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuItemActionPerformed(evt);
            }
        });
        extraMenu.add(settingsMenuItem);

        generateDummyContentMenuItem.setText("Generate Dummy Content");
        generateDummyContentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateDummyContentMenuItemActionPerformed(evt);
            }
        });
        extraMenu.add(generateDummyContentMenuItem);

        removeAllNotificationsMenuItem.setText("Remove all Notifications");
        removeAllNotificationsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllNotificationsMenuItemActionPerformed(evt);
            }
        });
        extraMenu.add(removeAllNotificationsMenuItem);

        sanityCheckMenuItem.setText("sanity check");
        sanityCheckMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sanityCheckMenuItemActionPerformed(evt);
            }
        });
        extraMenu.add(sanityCheckMenuItem);

        getAllHostersMenuItem.setText("get all Hosters");
        getAllHostersMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAllHostersMenuItemActionPerformed(evt);
            }
        });
        extraMenu.add(getAllHostersMenuItem);
        extraMenu.add(jSeparator2);

        rESTTestSimpleMenuItem.setText("run REST-Test simple");
        rESTTestSimpleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rESTTestSimpleMenuItemActionPerformed(evt);
            }
        });
        extraMenu.add(rESTTestSimpleMenuItem);

        rESTTestFullMenuItem.setText("run REST-Test full");
        rESTTestFullMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rESTTestFullMenuItemActionPerformed(evt);
            }
        });
        extraMenu.add(rESTTestFullMenuItem);
        
        shareTestFullMenuItem.setText("run Share-Test full");
        shareTestFullMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shareTestFullMenuItemActionPerformed(evt);
            }
        });
        extraMenu.add(shareTestFullMenuItem);

        checkAuthMenuItem.setText("check authentication at PS");
        checkAuthMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAuthMenuItemActionPerformed(evt);
            }
        });
        extraMenu.add(checkAuthMenuItem);

        searchGlobalMenuItem.setText("search PRS");
        searchGlobalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchGlobalMenuItemActionPerformed(evt);
            }
        });
        extraMenu.add(searchGlobalMenuItem);

        getModelCount.setText("getModelStat");
        getModelCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getModelCountActionPerformed(evt);
            }
        });
        extraMenu.add(getModelCount);

        jMenuBar1.add(extraMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void extraMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extraMenuActionPerformed
    }//GEN-LAST:event_extraMenuActionPerformed

    private void extraMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_extraMenuMouseClicked
    }//GEN-LAST:event_extraMenuMouseClicked

    private void settingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMenuItemActionPerformed
        Configurator configurator = new Configurator(this, true);
        configurator.setVisible(true);
        updateConfiguration(configurator.getConfiguration());

    }//GEN-LAST:event_settingsMenuItemActionPerformed

    private void getAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAllButtonActionPerformed
        TYPES type = typeList.getSelectedType();

        Logger.getLogger(ModelViewer.class.getName()).log(Level.INFO, "trying to fetch all items of type:" + type);
        try {
            itemList.setModel(new ListItemModel(Model.getInstance().getAllItems(getMRC(), type)));
        } catch (RuntimeException ex) {
            showError(ex);
        }
    }//GEN-LAST:event_getAllButtonActionPerformed

    private void itemListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemListMouseClicked

        Object selValue = itemList.getSelectedValue();
        if (selValue == null) {
            return;
        }
        GenItem item = (GenItem) selValue;

        showItemDetails(item);

    }//GEN-LAST:event_itemListMouseClicked

    private void clearCacheButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCacheButtonActionPerformed
        try {
            Model.getInstance().resetStorage();
        } catch (InitStorageFailedException ex) {
            showError(ex);
        }
    }//GEN-LAST:event_clearCacheButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        settingsMenuItemActionPerformed(evt);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void getButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getButtonActionPerformed
        TYPES type = typeList.getSelectedType();
        String guid = guidText.getText();
        if (guid.length() == 0) {
            return;
        }
        try {
            GenItem item = Model.getInstance().getItem(getMRC(), type, guid);
            if (item != null) {
                itemDetail.setVisible(true);
                itemDetail.showNewItem(item);
            }
        } catch (RuntimeException ex) {
            showError(ex);
        }
    }//GEN-LAST:event_getButtonActionPerformed

    private void generateDummyContentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateDummyContentMenuItemActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Generate dummy content. Are you sure?",
                "Please Confirm!", JOptionPane.YES_NO_OPTION)
                == JOptionPane.NO_OPTION) {
            return;
        }
        new Thread(new Runnable() {

            public void run() {
                try {
                    DummyContentGenerator.generateAllDummyContent(getDummyMRC());
                } catch (RuntimeException ex) {
                    showError(ex);
                }
                JOptionPane.showMessageDialog(ModelViewer.this, "generateAllDummyContent completed !");
            }
        }).start();



    }//GEN-LAST:event_generateDummyContentMenuItemActionPerformed

    private void showReceivedNotificationsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showReceivedNotificationsMenuItemActionPerformed
        nv.setVisible(true);
    }//GEN-LAST:event_showReceivedNotificationsMenuItemActionPerformed

    private void removeAllNotificationsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllNotificationsMenuItemActionPerformed

        try {
            ModelRequestContext mrc = getMRC();
            List<GenItem> notifications = Model.getInstance().getAllItems(mrc, TYPES.NOTIFICATION);


            for (GenItem notification : notifications) {
                Model.getInstance().removeItem(mrc, notification.getGuid(), TYPES.NOTIFICATION);
            }
        } catch (RuntimeException ex) {
            showError(ex);
        }
    }//GEN-LAST:event_removeAllNotificationsMenuItemActionPerformed

    private void importMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importMenuItemActionPerformed

        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            new Thread(new Runnable() {

                public void run() {
                    CSVParser myParser = new CSVParser();
                    try {
                        myParser.parseCSVFile(ModelViewer.this.getDummyMRC(), fileChooser.getSelectedFile());
                        JOptionPane.showMessageDialog(ModelViewer.this, "Import was successful!");
                    } catch (CreateItemFailedException ex) {
                        showError(ex);
                    } catch (FileNotFoundException ex) {
                        showError(ex);
                    } catch (RuntimeException ex) {
                        showError(ex);
                    }
                }
            }).start();


        }

    }//GEN-LAST:event_importMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed

        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void addNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewButtonActionPerformed
        try {
            ModelRequestContext mrc = this.getMRC();
            TYPES type = typeList.getSelectedType();


            GenItem item = ItemFactory.createNewItemByType(type);

            String title = "Create new item (" + ModelHelper.getNameOfType(type) + ")";

            try {
                DisplayableItem dItem = (DisplayableItem) item;

                String name = JOptionPane.showInputDialog(this, "Name: ", title, JOptionPane.QUESTION_MESSAGE);
                if (name == null) {
                    return;
                }
                dItem.setName(name);
                dItem.setUserId(mrc.owner);

                if (dItem.getMType() == TYPES.PROFILE) {
                    ProfileItem profileItem = (ProfileItem) dItem;
                    profileItem.setServiceAccountId(UUID.randomUUID().toString());
                }

            } catch (ClassCastException ex) {
                //no displayable item - skip name
                int result = JOptionPane.showConfirmDialog(this, JOptionPane.YES_NO_OPTION);
                if (result == JOptionPane.NO_OPTION) {
                    return;
                }
            }

            item = Model.getInstance().createItem(mrc, item);
            showItemDetails(item);
        } catch (CreateItemFailedException ex) {
            showError(ex);
        } catch (RuntimeException ex) {
            showError(ex);

        }

    }//GEN-LAST:event_addNewButtonActionPerformed

    private void ownerComboBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_ownerComboBoxPopupMenuWillBecomeVisible

        try {
            List<PersonItem> persons = ModelHelper.getAllPersons(this.getMRC());

            ownerComboBox.setModel(new OwnerComboModel(persons));
        } catch (RuntimeException ex) {
            showError(ex);
        }
    }//GEN-LAST:event_ownerComboBoxPopupMenuWillBecomeVisible

    private void sanityCheckMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sanityCheckMenuItemActionPerformed
        showLogView();

        this.scv.setVisible(true);

    }//GEN-LAST:event_sanityCheckMenuItemActionPerformed

    private void getAllHostersMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAllHostersMenuItemActionPerformed
        List<String> hosters = RestApiAccess.getAllHosters(Model.getInstance().getRestApiConfiguration());

        StringBuilder result = new StringBuilder();
        for (int i = 0; i < hosters.size(); i++) {
            String hoster = hosters.get(i);
            result.append(hoster);

            if (i < hosters.size() - 1) {
                result.append(", ");
            }

            if (i % 4 == 3) {
                result.append("\n");
            }
        }

        JOptionPane.showMessageDialog(this, result.toString());
    }//GEN-LAST:event_getAllHostersMenuItemActionPerformed

    private void rESTTestSimpleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rESTTestSimpleMenuItemActionPerformed
        showLogView();
        final ModelRequestContext mrc = this.getMRC();
        final Component thisComponent = this;
        new Thread(new Runnable() {

            public void run() {
                new RestApiTest(Model.getInstance().getRestApiConfiguration(), true).doSimpleTest(mrc.hoster, mrc.owner);
                JOptionPane.showMessageDialog(thisComponent, "Test completed! - Check for \"result-restapitest.csv\" in working directory.");
            }
        }).start();

    }//GEN-LAST:event_rESTTestSimpleMenuItemActionPerformed

    private void rESTTestFullMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rESTTestFullMenuItemActionPerformed
        showLogView();
        final ModelRequestContext mrc = this.getMRC();
        final Component thisComponent = this;
        new Thread(new Runnable() {

            public void run() {
                new RestApiTest(Model.getInstance().getRestApiConfiguration(), true).doFullTest(mrc.hoster, mrc.owner);
                JOptionPane.showMessageDialog(thisComponent, "Test completed! - Check for \"result-restapitest.csv\" in working directory.");
            }
        }).start();

    }//GEN-LAST:event_rESTTestFullMenuItemActionPerformed
    
    private void shareTestFullMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shareTestFullMenuItemActionPerformed
        showLogView();
        final Component thisComponent = this;
        new Thread(new Runnable() {

            public void run() {
                new ShareItemTest().runFullShareItemTest();
                JOptionPane.showMessageDialog(thisComponent, "Test completed! - Check for \"result-sharetest.csv\" in working directory.");
            }
        }).start();

    }//GEN-LAST:event_shareTestFullMenuItemActionPerformed

    private void showLogMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showLogMenuItemActionPerformed
        showLogView();
    }//GEN-LAST:event_showLogMenuItemActionPerformed

    private void checkAuthMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAuthMenuItemActionPerformed
        ModelRequestContext mrc = this.getMRC();
        try{
        	boolean authenticated = (new DimeHelper()).dimeServerIsAuthenticated(mrc.hoster, Model.getInstance().getRestApiConfiguration());
        	JOptionPane.showMessageDialog(this, "Authentication for hoster: " + mrc.hoster + " " + (authenticated ? "granted" : "denied"));
        	return;
	    } catch (MalformedURLException ex) {
	        Logger.getLogger(HttpHelper.class.getName()).log(Level.SEVERE, "MalformedURLException:" + ex.getMessage());
	    } catch (ProtocolException ex) {
	        Logger.getLogger(HttpHelper.class.getName()).log(Level.SEVERE, "ProtocolException:" + ex.getMessage());
	    } catch (IOException ex) {
	        Logger.getLogger(HttpHelper.class.getName()).log(Level.SEVERE, "IOException:" + ex.getMessage());
	    }
        JOptionPane.showMessageDialog(this, "Connection failed to server (hoster): " + mrc.hoster);
    }//GEN-LAST:event_checkAuthMenuItemActionPerformed

    private void searchGlobalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchGlobalMenuItemActionPerformed
        SearchGlobalDialog sgd = new SearchGlobalDialog(this, true, getDummyMRC());
        sgd.setVisible(true);
    }//GEN-LAST:event_searchGlobalMenuItemActionPerformed

    private void getModelCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getModelCountActionPerformed
        Model.ModelStat stat = Model.getInstance().calcModelStat();
        JOptionPane.showMessageDialog(this, "Total Entries:"+stat.totalEntries);
    }//GEN-LAST:event_getModelCountActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModelViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModelViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModelViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModelViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ModelViewer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewButton;
    private javax.swing.JMenuItem checkAuthMenuItem;
    private javax.swing.JButton clearCacheButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu extraMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem generateDummyContentMenuItem;
    private javax.swing.JButton getAllButton;
    private javax.swing.JMenuItem getAllHostersMenuItem;
    private javax.swing.JButton getButton;
    private javax.swing.JMenuItem getModelCount;
    private javax.swing.JTextField guidText;
    private javax.swing.JTextField hosterText;
    private javax.swing.JMenuItem importMenuItem;
    private javax.swing.JList itemList;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JScrollPane listScrollPane;
    private javax.swing.JComboBox ownerComboBox;
    private javax.swing.JMenuItem rESTTestFullMenuItem;
    private javax.swing.JMenuItem shareTestFullMenuItem;
    private javax.swing.JMenuItem rESTTestSimpleMenuItem;
    private javax.swing.JMenuItem removeAllNotificationsMenuItem;
    private javax.swing.JMenuItem sanityCheckMenuItem;
    private javax.swing.JMenuItem searchGlobalMenuItem;
    private javax.swing.JMenuItem settingsMenuItem;
    private javax.swing.JMenuItem showLogMenuItem;
    private javax.swing.JMenuItem showReceivedNotificationsMenuItem;
    private javax.swing.JComboBox typeSelectCombo;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables

    public ModelRequestContext getMRC() {

        return new ModelRequestContext(
                hosterText.getText(),
                ((OwnerComboListItem) ownerComboBox.getSelectedItem()).guid,
                lvh);
    }

    public ModelRequestContext getDummyMRC() {

        return new ModelRequestContext(
                hosterText.getText(),
                ((OwnerComboListItem) ownerComboBox.getSelectedItem()).guid,
                new DummyLoadingViewHandler());
    }

    public void showItemDetails(GenItem item) {
        guidText.setText(item.getGuid());
        itemDetail.setVisible(true);
        itemDetail.showNewItem(item);
    }

    private void showError(Exception ex) {
        Logger.getLogger(ModelViewer.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void showLogView() {
        logView.setVisible(true);
    }
}
