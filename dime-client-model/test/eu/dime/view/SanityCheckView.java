/*
* Copyright 2013 by the digital.me project (http:\\www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.dime.view;

import eu.dime.control.DummyLoadingViewHandler;
import eu.dime.control.LoadingViewHandler;
import eu.dime.model.Model;
import eu.dime.model.ModelHelper;
import eu.dime.model.ModelRequestContext;
import eu.dime.model.TYPES;
import eu.dime.model.displayable.DisplayableItem;
import eu.dime.model.displayable.ProfileItem;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * @author simon
 */
public class SanityCheckView extends javax.swing.JDialog {

    private final ModelViewer mv;
    /**
     * Creates new form SanityCheckView
     */
    public SanityCheckView(ModelViewer parent, boolean modal) {
        super(parent, modal);
        this.mv = parent;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkAndRepairUserIdButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        checkOnlyUserIdButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        checkAndRepairUserIdButton.setText("check and repair");
        checkAndRepairUserIdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAndRepairUserIdButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Sanity Check");

        jLabel2.setText("check for missing UserIds");

        jLabel3.setText("check for missing saids in Profiles");

        jButton1.setText("close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        checkOnlyUserIdButton.setText("check only");
        checkOnlyUserIdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOnlyUserIdButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkAndRepairUserIdButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(checkOnlyUserIdButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(5, 5, 5)
                .addComponent(checkOnlyUserIdButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkAndRepairUserIdButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkAndRepairUserIdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAndRepairUserIdButtonActionPerformed

        
        new Thread(new Runnable() {

            public void run() {
                checkSanity(true);
                JOptionPane.showMessageDialog(SanityCheckView.this, "Sanity check completed - please check the log!");
            }
        }).start();
        
        
    }//GEN-LAST:event_checkAndRepairUserIdButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void checkOnlyUserIdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOnlyUserIdButtonActionPerformed
          new Thread(new Runnable() {

            public void run() {
                checkSanity(false);
                JOptionPane.showMessageDialog(SanityCheckView.this, "Sanity check completed - please check the log!");
            }
        }).start();
        
    }//GEN-LAST:event_checkOnlyUserIdButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkAndRepairUserIdButton;
    private javax.swing.JButton checkOnlyUserIdButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables

    private void checkSanityForHoster(String hoster, boolean doRepair) {
        
        LoadingViewHandler lvh = new DummyLoadingViewHandler();
        
        ModelRequestContext mrc = new ModelRequestContext(hoster, Model.ME_OWNER, lvh);
        
        List<String> owners = Model.getInstance().getAllOwners(mrc);
        
        for (String owner : owners){
            checkSanity(new ModelRequestContext(hoster, owner, lvh), doRepair);
        }
        
        
    }

    private void checkSanity(ModelRequestContext modelRequestContext, boolean doRepair) {
        
        //check all displayble items
        for (TYPES type : TYPES.values()){
            if (ModelHelper.isDisplayableItem(type)){
                checkUserId(modelRequestContext, type, doRepair);
            }
        }        
        
        checkProfileHasSAID(modelRequestContext, doRepair);
    }

    private void checkUserId(ModelRequestContext modelRequestContext, TYPES type, boolean doRepair) {
        String userId = modelRequestContext.owner;
        
        List<DisplayableItem> dItems = ModelHelper.getAllDisplayableItems(modelRequestContext, type);
        for (DisplayableItem dItem : dItems){
            if (!userId.equals(dItem.getUserId())){
                Logger.getLogger(SanityCheckView.class.getName()).log(Level.SEVERE, 
                        "missing/wrong userId for Item: (should be:"+userId+")\n"
                        +dItem.getJSONObject().toString());
                if (!doRepair){
                    continue;
                }
                Logger.getLogger(SanityCheckView.class.getName()).log(Level.INFO,                         
                        "\n fixing...");
                dItem.setUserId(userId);
                Model.getInstance().updateItem(modelRequestContext, dItem);
            }
        }
    }

    private void checkProfileHasSAID(ModelRequestContext modelRequestContext, boolean doRepair) {
        List<ProfileItem> profiles = ModelHelper.getAllProfiles(modelRequestContext);
        for (ProfileItem profile: profiles){
            if ((profile.getServiceAccountId()==null)
                    || (profile.getServiceAccountId().length()==0)){
                Logger.getLogger(SanityCheckView.class.getName()).log(Level.SEVERE, 
                        "found empty service-account-id for profile:\n"
                        + profile.getJSONObject().toString()
                        +"\n fixing ... generating random service-account-id");
                
                if (!doRepair){
                    continue;
                }
                String said = UUID.randomUUID().toString();
                profile.setServiceAccountId(said);
                Model.getInstance().updateItem(modelRequestContext, profile);                
                Logger.getLogger(SanityCheckView.class.getName()).log(Level.INFO, "new said:\n"+said);
                
            }
        }
    }
    
    private void checkSharingConsistency(ModelRequestContext modelRequestContext, List<String> hosters, boolean repair){
        for (String aHoster : hosters){
            ModelRequestContext meMrc = new ModelRequestContext(
                        aHoster,
                        Model.ME_OWNER,
                        modelRequestContext.lvHandler
                        );
            
            String aSaid=ModelHelper.getDefaultSenderSaid(meMrc);
            
            
            for (String bHoster : hosters){
                if (aHoster.equals(bHoster)){
                    continue;
                }//else
                
                String owner = findRemoteOwnerBySaid(aSaid);
                
                
                ModelRequestContext themMrc = new ModelRequestContext(
                        aHoster,
                        Model.ME_OWNER,
                        modelRequestContext.lvHandler
                        );    
                
                throw new UnsupportedOperationException("Not yet implemented");
            }
            
        }
    }

    private String findRemoteOwnerBySaid(String aSaid) {
        throw new UnsupportedOperationException("Not yet implemented");
    }

    private void checkSanity(boolean doRepair) {
        String buttonText = checkAndRepairUserIdButton.getText();
        checkAndRepairUserIdButton.setText("watch console");
        checkAndRepairUserIdButton.setEnabled(false);
        
        Logger.getLogger(SanityCheckView.class.getName()).log(Level.INFO, "sanity check ongoing - please wait! ...");
        
        //WARNING these are not realy all hosters - but all hosters known to the local model (cache)
        
        Set<String> hosters = Model.getInstance().getAllHosters();
        
        //make sure at least the hoster from the configuration is set
        hosters.add(mv.getMRC().hoster);
        
        for (String hoster : hosters){
            checkSanityForHoster(hoster, doRepair);
        }
        
        Logger.getLogger(SanityCheckView.class.getName()).log(Level.INFO, "check finished!");
        
        checkAndRepairUserIdButton.setText(buttonText);
        checkAndRepairUserIdButton.setEnabled(true);
        this.setVisible(false);
    }
}
